AWSTemplateFormatVersion: 2010-09-09
Description: Deploying OpenVidu Server over AWS

Parameters:

  # SSL certificate configuration

  WhichCert:
    Description: "You can choose from the list below which certificate mode to use"
    Type: String
    AllowedValues:
      - selfsigned
      - letsencrypt
      - owncert
    Default: selfsigned

  LetsEncryptEmail:
    Description: "Email necessary for Let's Encrypt notifications"
    Type: String

  MyDomainName:
    Description: "Valid DNS record name like mycompany.com"
    Type: String
    AllowedPattern: ^(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d])\.)*(?:_?(?>[a-z\d][a-z\d-]{0,61}[a-z\d]|[a-z\d]))\.?$
    Default: openvidu.mycompany.com
    ConstraintDescription: Must be a valid DNS name. Like myapp.example.com

  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
    AllowedPattern: ^([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])\.([01]?\d{1,2}|2[0-4]\d|25[0-5])$
    Default: 1.0.2.0
    ConstraintDescription: Must be a valid IP address. A valid IP address must be in the form of xxx.xxx.xxx.xxx, where xxx is a number from 0-255

  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY:
    Description: "URL to the KEY file"
    Type: String

  # OpenVidu configuration

  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server. No whitespaces or quotations allowed. NOTE: If you deploy the demos (see 'Other configuration' section below) password must be MY_SECRET or the demos won't be able to connect to OpenVidu out-of-the-box"
    Type: String
    AllowedPattern: ^((?!")(?! ).)*$
    Default: MY_SECRET
    NoEcho: true

  FreeHTTPAccesToRecordingVideos:
    Description: "Do you want your recordings to be access publicly?"
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  OpenviduRecordingNotification:
    Description: "Which users should receive recording events in the client side"
    Type: String
    AllowedValues:
      - all
      - publisher_moderator
      - moderator
      - none
    Default: publisher_moderator

  OpenViduRecordingTimeOut:
    Description: "Timeout in seconds for recordings to automatically stop"
    Type: Number
    Default: 120

  OpenviduStreamsVideoMaxRecvBandwidth:
    Description: "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
    Type: Number
    Default: 1000

  OpenviduStreamsVideoMinRecvBandwidth:
    Description: "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained"
    Type: Number
    Default: 300

  OpenviduStreamsVideoMaxSendBandwidth:
    Description: "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
    Type: Number
    Default: 1000

  OpenviduStreamsVideoMinSendBandwidth:
    Description: "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained"
    Type: Number
    Default: 300

  OpenViduWebhook:
    Description: "Whether to enable OpenVidu Server Webhook service or not"
    Type: String
    AllowedValues:
      - false
      - true
    Default: false

  OpenViduWebhookEndpoint:
    Description: "HTTP endpoint where OpenVidu Server will send Webhook HTTP POST messages"
    Type: String
    Default: http://my.endpoint.com

  OpenViduWebhookHeaders:
    Description: "List of headers that OpenVidu Server Webhook service will attach to HTTP POST messages. JUST one header at the moment"
    Type: String

  OpenViduWebhookEvents:
    Description: "Comma separated list of events that will be notified by OpenVidu Server Webhook service. Check out available events here: https://openvidu.io/docs/reference-docs/openvidu-server-cdr"
    Type: String
    Default: "sessionCreated,sessionDestroyed,participantJoined,participantLeft,webrtcConnectionCreated,webrtcConnectionDestroyed,recordingStatusChanged,filterEventDispatched"

  OpenviduCDREnable:
    Description: "Whether to enable OpenVidu Call Detail Record service or not"
    Type: String
    AllowedValues:
      - false
      - true
    Default: false

  # Other configuration

  InstanceType:
    Description: "Specifies the EC2 instance type for your OpenVidu instance"
    Type: String
    Default: t2.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5d.xlarge
      - c5d.2xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: "Must be a valid EC2 instance type"

  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: "must be the name of an existing EC2 KeyPair"

  UbuntuVersion:
    Description: "Ubuntu version where to deploy OpenVidu"
    Type: String
    Default: Ubuntu-16.04
    AllowedValues:
      - Ubuntu-16.04
      - Ubuntu-18.04

  WantToDeployDemos:
    Description: "Choose if you want to deploy OpenVidu demo applications. If true, then parameter openvidu.secret must be MY_SECRET for the demos to work out-of-the-box"
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  WantToSendInfo:
    Description: "Do you agree to send anonymous information to OpenVidu team for statistics?"
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  OpenViduVersion:
    Description: "OpenVidu Server version. WARNING: this parameter is only used when upgrading/downgrading an existing stack (https://openvidu.io/docs/deployment/upgrading)"
    Type: String
    Default: 2.12.0

Mappings:

  RegionMapXenial:
    eu-north-1:
      AMI: ami-017ad30b324faed9b
    eu-west-3:
      AMI: ami-051ebe9615b416c15
    eu-west-2:
      AMI: ami-0a590332f9f499197
    eu-west-1:
      AMI: ami-0f630a3f40b1eb0b8
    ap-northeast-2:
      AMI: ami-0c5a717974f63b04c
    ap-northeast-1:
      AMI: ami-03344c819e1ac354d
    sa-east-1:
      AMI: ami-0a16d0952a2a7b0ce
    ca-central-1:
      AMI: ami-0f06e521718460abf
    ap-south-1:
      AMI: ami-0c28d7c6dd94fb3a7
    ap-southeast-1:
      AMI: ami-0ca13b3dabeb6c66d
    ap-southeast-2:
      AMI: ami-02d7e25c1cfdd5695
    ap-northeast-1:
      AMI: ami-03344c819e1ac354d
    ap-northeast-2:
      AMI: ami-0c5a717974f63b04c
    ap-northeast-3:
      AMI: ami-03f0ddd1562f1b937
    ap-east-1:
      AMI: ami-9f793dee
    eu-central-1:
      AMI: ami-03d8059563982d7b0
    us-east-1:
      AMI: ami-08bc77a2c7eb2b1da
    us-east-2:
      AMI: ami-08cec7c429219e339
    us-west-1:
      AMI: ami-094f0176b0d009d9f
    us-west-2:
      AMI: ami-02d0ea44ae3fe9561
    me-south-1:
      AMI: ami-0df89c0ad05708804

  RegionMapBionic:
    eu-north-1:
      AMI: ami-0e850e0e9c20d9deb
    eu-west-3:
      AMI: ami-0c367ebddcf279dc6
    eu-west-2:
      AMI: ami-04cc79dd5df3bffca
    eu-west-1:
      AMI: ami-07042e91d04b1c30d
    ap-northeast-2:
      AMI: ami-096e3ded41e3bda6a
    ap-northeast-1:
      AMI: ami-01f90b0460589991e
    sa-east-1:
      AMI: ami-0cb1ddea3786f6c0d
    ca-central-1:
      AMI: ami-064efdb82ae15e93f
    ap-south-1:
      AMI: ami-0d11056c10bfdde69
    ap-southeast-1:
      AMI: ami-07ce5f60a39f1790e
    ap-southeast-2:
      AMI: ami-04c7af7de7ad468f0
    ap-northeast-1:
      AMI: ami-01f90b0460589991e
    ap-northeast-2:
      AMI: ami-096e3ded41e3bda6a
    ap-northeast-3:
      AMI: ami-0942fd36e1571cbdf
    ap-east-1:
      AMI: ami-868bcff7
    eu-central-1:
      AMI: ami-0718a1ae90971ce4d
    us-east-1:
      AMI: ami-046842448f9e74e7d
    us-east-2:
      AMI: ami-0367b500fdcac0edc
    us-west-1:
      AMI: ami-0d58800f291760030
    us-west-2:
      AMI: ami-0edf3b95e26a682df
    me-south-1:
      AMI: ami-0e40363f9ed76073b

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: SSL certificate configuration
        Parameters:
          - WhichCert
          - LetsEncryptEmail
          - MyDomainName
          - PublicElasticIP
          - OwnCertCRT
          - OwnCertKEY
      - Label:
          default: OpenVidu configuration (https://openvidu.io/docs/reference-docs/openvidu-server-params)
        Parameters:
          - OpenViduSecret
          - FreeHTTPAccesToRecordingVideos
          - OpenviduRecordingNotification
          - OpenViduRecordingTimeOut
          - OpenviduStreamsVideoMaxRecvBandwidth
          - OpenviduStreamsVideoMinRecvBandwidth
          - OpenviduStreamsVideoMaxSendBandwidth
          - OpenviduStreamsVideoMinSendBandwidth
          - OpenViduWebhook
          - OpenViduWebhookEndpoint
          - OpenViduWebhookHeaders
          - OpenViduWebhookEvents
          - OpenviduCDREnable
      - Label:
          default: Other configuration
        Parameters:
          - InstanceType
          - KeyName
          - UbuntuVersion
          - WantToDeployDemos
          - WantToSendInfo
          - OpenViduVersion

    ParameterLabels:
      # SSL certificate configuration
      WhichCert:
        default: "Choose the certificate"
      LetsEncryptEmail:
        default: "Email for Let's Encrypt certification authority"
      MyDomainName:
        default: "Full qualified domain name"
      PublicElasticIP:
        default: "Public elastic IP (EIP)"
      OwnCertCRT:
        default: "URL to the CRT file"
      OwnCertKEY:
        default: "URL to the key file"
      # OpenVidu configuration
      OpenViduSecret:
        default: "openvidu.secret"
      FreeHTTPAccesToRecordingVideos:
        default: "openvidu.recording.public-access"
      OpenviduRecordingNotification:
        default: "openvidu.recording.notification"
      OpenViduRecordingTimeOut:
        default: "openvidu.recording.autostop-timeout"
      OpenviduStreamsVideoMaxRecvBandwidth:
        default: "openvidu.streams.video.max-recv-bandwidth"
      OpenviduStreamsVideoMinRecvBandwidth:
        default: "openvidu.streams.video.min-recv-bandwidth"
      OpenviduStreamsVideoMaxSendBandwidth:
        default: "openvidu.streams.video.max-send-bandwidth"
      OpenviduStreamsVideoMinSendBandwidth:
        default: "openvidu.streams.video.min-send-bandwidth"
      OpenViduWebhook:
        default: "openvidu.webhook"
      OpenViduWebhookEndpoint:
        default: "openvidu.webhook.endpoint"
      OpenViduWebhookHeaders:
        default: "openvidu.webhook.headers"
      OpenViduWebhookEvents:
        default: "openvidu.webhook.events"
      OpenviduCDREnable:
        default: "openvidu.cdr"
      # Other configuration
      InstanceType:
        default: "Instance type"
      KeyName:
        default: "Key name"
      UbuntuVersion:
        default: "Ubuntu version"
      WantToDeployDemos:
        default: "Deploy Demos"
      WantToSendInfo:
        default: "Do you want to send info to OpenVidu?"
      OpenViduVersion:
        default: "OpenVidu version"

Conditions:
  NoSelfSigned: !Not
    - !Equals
      - !Ref WhichCert
      - selfsigned
  IsUbuntu16: !Equals
      - !Ref UbuntuVersion
      - Ubuntu-16.04

Resources:

  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: 'Install and configure OpenVidu Server and Demos'
      AWS::CloudFormation::Init:
        config:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.OpenviduServer.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/openvidu_update_stack.sh
                runas=root
              mode: '000400'
              owner: root
              group: root
            '/usr/local/bin/installAnsible.sh':
              content: |
                #!/bin/bash
                apt-add-repository -y ppa:ansible/ansible
                apt-get update && apt-get install -y ansible
                ansible-galaxy install -p /etc/ansible/roles geerlingguy.docker
                ansible-galaxy install -p /etc/ansible/roles geerlingguy.mysql
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/cloneRepo.sh':
              content: |
                #!/bin/bash
                git clone https://github.com/OpenVidu/openvidu-cloud-devops /usr/src/openvidu
                cd /usr/src/openvidu/cloudformation-openvidu
                git checkout master
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/getPublicInfo.sh':
              content: |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                sed -i "s/AWS_EIP/$PIP/" $WORKINGDIR/group_vars/all
                sed -i "s/AWS_PUBLIC_HOSTNAME/$PublicHostname/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/feedGroupVars.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                OPENVIDU_VERSION=2.12.0
                OPENVIDU_DEMOS_VERSION=2.12.0
                OPENVIDU_CALL_VERSION=2.12.0
                sed -i "s/OPENVIDU_VERSION/$OPENVIDU_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/DEMOS_VERSION/$OPENVIDU_DEMOS_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/OVC_VERSION/$OPENVIDU_CALL_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/WANTDEMOS/${WantToDeployDemos}/" $WORKINGDIR/group_vars/all
                sed -i "s/whichcert: selfsigned/whichcert: ${WhichCert}/" $WORKINGDIR/group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" $WORKINGDIR/group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" $WORKINGDIR/group_vars/all
                sed -i "s/MY_SECRET/${OpenViduSecret}/" $WORKINGDIR/group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" $WORKINGDIR/group_vars/all
                sed -i "s/allowsendinfo: true/allowsendinfo: ${WantToSendInfo}/" $WORKINGDIR/group_vars/all
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDURECORDINGTIMEOUT/${OpenViduRecordingTimeOut}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/WEBHOOK_ENABLED/${OpenViduWebhook}/" $WORKINGDIR/group_vars/all
                sed -i "s#WEBHOOK_ENDPOINT#${OpenViduWebhookEndpoint}#" $WORKINGDIR/group_vars/all
                sed -i "s/WEBHOOK_HEADERS/${OpenViduWebhookHeaders}/" $WORKINGDIR/group_vars/all
                sed -i "s/WEBHOOK_EVENTS/${OpenViduWebhookEvents}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDU_CDR/${OpenviduCDREnable}/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/buildCerts.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                wget -O $WORKINGDIR/roles/nginx/files/nginx.crt ${OwnCertCRT}
                wget -O $WORKINGDIR/roles/nginx/files/nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/openvidu/version":
              content: !Sub |
                ${OpenViduVersion}
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !If
        - IsUbuntu16
        - !FindInMap
          - RegionMapXenial
          - !Ref 'AWS::Region'
          - AMI
        - !FindInMap
          - RegionMapBionic
          - !Ref 'AWS::Region'
          - AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          set -eu -o pipefail

          apt-get update
          apt-get install -y git software-properties-common python-pip

          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # Set the version
          OPENVIDU_VERSION=${OpenViduVersion}

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer

          /usr/local/bin/installAnsible.sh || { echo "[Openvidu] Can't install ansible"; exit 1; }
          /usr/local/bin/cloneRepo.sh || { echo "[Openvidu] Can't clone the repo"; exit 1; }
          /usr/local/bin/getPublicInfo.sh || { echo "[Openvidu] Network problem"; exit 1; }
          /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }
          if [ "${WhichCert}" == "owncert" ]; then
            /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
          fi
          source /home/ubuntu/.bashrc
          export HOME=/home/ubuntu

          pushd /usr/src/openvidu/cloudformation-openvidu
          ansible-playbook -i "localhost," -c local play.yml
          popd

          # Wait for the app
          /usr/local/bin/check_app_ready.sh

          # Start up the cfn-hup daemon to listen for changes to the Web Server metadata
          /usr/local/bin/cfn-hup -v || { echo "[Openvidu] Failed to start cfn-hup"; exit 1; }

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 100

  MyEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenviduServer
      EIP: !Ref PublicElasticIP

  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5443
          ToPort: 5443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 40000
          ToPort: 65535
          CidrIp: 0.0.0.0/0

Outputs:
  WebsiteURL:
    Description: Use this URL to connect OpenVidu Server
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - OpenviduServer
          - PublicDnsName
        - ':4443'
  WebsiteURLLE:
    Description: Use this URL to connect to OpenVidu
    Value: !Join
      - ''
      - - 'https://'
        - !Ref MyDomainName
        - ':4443'
    Condition: NoSelfSigned
  DemosURL:
    Description: If you choose to deploy the demos you can access througt this
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - OpenviduServer
          - PublicDnsName
  DemosURLLE:
    Description: If you choose to deploy the demos with your own DNS name you can access througt this
    Value: !Join
      - ''
      - - 'https://'
        - !Ref MyDomainName
    Condition: NoSelfSigned

